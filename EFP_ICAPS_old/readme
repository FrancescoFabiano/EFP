======================================================================
=  CPA+ PLANNER version 1.1 : A sound & complete conformant planner  =
=        as described in the paper (Son & Tu, KR'06)                 =
======================================================================

0. What's new

- goal can be described as a CNF formula

1. Compilation

        make

    + Requirements:

        flex, bison and a C++ compiler such as g++.

2. Usage

    cpa input_domain [options]

a) input_domain: A domain described in the AL language. This 
   version does not support variables and static laws.

b) Options
    -e action1 action2 action3 ...
       Perform a sequence of actions and print out
       results step by step. The planner does not
       search for a plan.

    -p 
       Force to use possible world semantics. This option
       is not recommended.
   
   -o
       Print decisive set for each possible initial partial state

c) Examples

    cpa blw.al
       Find a conformant plan for blw.al

    cpa blw.al -e "move(2,table)" "move(1,2)"
       Execute the plan [move(2,table);move(1,2)]

3. Files
   - README:      this file
   - Makefile:    the make file
   - define.h:    contains compilation directives, constants, 
                  and some auxiliary classes.
   - main.cpp:	  main program
   - action.*:    implement actions (class Action)
   - state.*:     implement states and c-states (class State & CState)
   - planner.*:   the planner. The most notable functions are
         (i)   next_state_pc: computes the next state using the pc-semantics
         (ii)  next_state_ph: computes the next state using the ph-semantics
         (iii) next_cstate: computes the next c-state
         (iv)  explore_one: explores one more level of the search tree
         (v)   search: does the search
   - reader.*:    the data structure for storing the input after
                  scanning and parsing
   - lcp.y & lcp.lex: The scanner & parser components.

4. Main Classes
   - Planner
   - Action
   - State
   - CState: is a set of states
   - Reader: stores the results after scanning & parsing the input
