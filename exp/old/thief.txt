fluent thief, guard, catched;

action noiseTh, noiseGu, seeGu, seeTh, seeBoth, ambush, rush, trick;

agent t,g;

executable noiseTh if B(t,thief), thief;
noiseTh causes thief;
t observes noiseTh;
g observes noiseTh if guard;

executable noiseGu if B(g,guard), guard;
noiseGu causes guard;
t observes noiseGu if thief;
g observes noiseGu;

executable seeGu if B(g,guard), B(t, thief), guard, thief;
seeGu causes guard;
t observes seeGu;

executable seeTh if B(g,guard), B(t, thief), guard, thief;
seeTh causes thief;
g observes seeTh;

executable seeBoth if B(g,guard), B(t, thief), guard, thief;
seeBoth causes thief,guard;
g observes seeBoth;
t observes seeBoth;

%executable ambush if B(g, thief), (-B(t,guard)), guard, thief;
%ambush causes catched;
%g observes ambush;
%t observes ambush;

executable trick if B(t, guard), B(t,(-B(g,thief))), guard, thief;
trick causes catched;
g observes trick;
t observes trick;

%executable rush if thief;
%rush causes catched;
%g observes rush;
%t observes rush;

initially -catched, thief, guard;
initially C([t,g],-catched);
initially C([t,g],B(t, thief) | B(t,-thief));
initially C([t,g],B(g, guard) | B(t,-guard));

goal catched;





