fluent at_Father_PO1, 	at_Father_PO2,	at_Father_Home;
fluent at_Present_PO1,	at_Present_PO2;
fluent has_Father_Present;
fluent wrapped_Present;

action go_PO1, go_PO2, go_Home;
action pickUp_PO1, pickUp_PO2;
action ask_Employee;
action wrap;


agent father,employee;


executable go_PO1 if B(father, at_Present_PO1), (-at_Father_PO1, ;
go_PO1 causes at_Father_PO1;
go_PO1 causes -at_Father_PO2;
go_PO1 causes -at_Father_Home;
father observes go_PO1;

executable go_PO2 if B(father, at_Present_PO2), -at_Father_PO2,;
go_PO2 causes at_Father_PO2;
go_PO2 causes -at_Father_PO1;
go_PO2 causes -at_Father_Home;
father observes go_PO2;

executable go_Home if -at_Father_Home;
go_Home causes at_Father_Home;
go_Home causes -at_Father_PO1;
go_Home causes -at_Father_PO2;
father observes go_Home;



executable pickUp_PO1 if at_Father_PO1;
pickUp_PO1 causes has_Father_Present if at_Present_PO1;
pickUp_PO1 causes -at_Present_PO1 if -at_Present_PO1;
father observes pickUp_PO1;

executable pickUp_PO2 if at_Father_PO2;
pickUp_PO2 causes has_Father_Present if at_Present_PO2;
pickUp_PO2 causes -at_Present_PO2 if -at_Present_PO2;
father observes pickUp_PO2;



executable ask_Employee if (B(employee, at_Present_PO1) | B(employee, at_Present_PO2));
ask_Employee announces at_Present_PO1 if B(employee, at_Present_PO1);
ask_Employee announces at_Present_PO2 if B(employee, at_Present_PO2);
father observes ask_Employee;
employee observes ask_Employee;



executable wrap if has_Father_Present, at_Father_Home, -wrapped_Present;
wrap causes wrapped_Present;
father observes wrap;

initially C([father,employee],-wrapped_Present);
initially C([father,employee],-has_Father_Present);
initially C([father,employee], B(employee, at_Present_PO1) | B(employee, (-at_Present_PO1)));
initially C([father,employee], B(employee, at_Present_PO2) | B(employee, (-at_Present_PO2)));
initially C([father,employee], at_Father_Home);
initially C([father,employee], -at_Father_PO1);
initially C([father,employee], -at_Father_PO2);


initially -wrapped_Present, -has_Father_Present, -at_Present_PO1, at_Present_PO2, at_Father_Home, -at_Father_PO1, -at_Father_PO2;

goal B(father, wrapped_Present);